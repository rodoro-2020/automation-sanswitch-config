#!/usr/bin/expect -f

set ipswitch "10.0.0.10"

#Login cumulus
spawn ssh -o StrictHostKeyChecking=no root@$ipswitch

expect "root@$ipswitch's password: " { send -- "fibranne\r" }
expect ":root>"

#pruba1
send "licenseshow >> /tmp/test.log"
interact 

#Priviliged user
send "sudo su -\r"
expect "password for cumulus: " {send "CumulusLinux!\r"}
expect "root@cumulus:~#"

#get serial number switch
send "serialnumber=\$(dmidecode | grep -i serial | awk '\{print \$3\}')\r"
expect "root@cumulus:~#"


#check if license exists
send "cl-license\r"
expect {
        "No license installed!" {
		puts""
                puts "*****************************************************************"
                puts "*                Licencia no instalada o corrupta.              *"
		puts "*        Contactar al equipo de Ingenieria de pruebas CSC       *"
                puts "*****************************************************************"
		send "exit\r"
		send "exit\r"
                }

	"root@cumulus:~# " {
	puts ""
	}
}

        puts ""
        puts "*****************************************************************"
        puts "*            Copiando archivos interfaces a cumulus             *"
        puts "*                                                               *"
        puts "*****************************************************************"

send "cat /etc/cumulus/.license > /tmp/\$serialnumber.log\r"

#Network configuration copy
send "scp -o StrictHostKeyChecking=no root@$ipgems:/home/dev/autnetess/sw1gconfig/*interfaces /etc/network/\r"
sleep 21 
expect "root@$ipgems's password:" {send "cluster\r"} 
expect "root@cumulus:~# "
send "ifreload -a \r"
sleep 3
send "ifquery -a >> /tmp/\$serialnumber.log\r"
expect "root@cumulus:~# "
send "net show interface all >> /tmp/\$serialnumber.log\r"
expect "root@cumulus:~# "

#firmware update

#flag and version variables
set version "3.5.2"
set var 0

#get version
send "net show version | grep -i RELEASE | awk '\{split(\$0,a,\"=\")\; print (a\[2\] \)}'\r"
expect {

        #lastest version comparison
        "$version" {
        set var 1

	puts ""
        puts "*****************************************************************"
        puts "*       El equipo ya cuenta con el firmware actualizado.        *"
        puts "*****************************************************************"

	send "sudo cl-support\r"
	
	puts ""
	puts "*****************************************************************"
        puts "*         Generando Log de evidencias y cl-support.tar.xz       *"
        puts "*****************************************************************"

	sleep 72	
	expect "Please send /var/support/cl_support_cumulus"
	send "scp -o StrictHostKeyChecking=no /var/support/cl_support_cumulus_* root@$ipgems:/home/dev/autnetess/evidencias1Gswitch/\r"
	expect "root@$ipgems's password:" {send "cluster\r"}
	expect "root@cumulus:~# "
	send "net show version >> /tmp/\$serialnumber.log\r"
	expect "root@cumulus:~#"
	send "scp /tmp/\$serialnumber.log root@$ipgems:/home/dev/autnetess/evidencias1Gswitch/\r"
	expect "root@$ipgems's password:" {send "cluster\r"}

	puts ""
	puts "*******************************************************************"
        puts "*                  Configuracion finalizada                       *"
        puts "*******************************************************************"

        }
}

expect "root@cumulus:~# "
interact
#outdated version filter
#if {$var == 0} {
#        spawn scp -o StrictHostKeyChecking=no /home/dev/autnetess/sw1gconfig/cumulus-linux-3.5.2-bcm-armel.bin2 cumulus@$ipswitch:/tmp/
#        sleep 21
#        expect "cumulus@$ipswitch's password:" { send -- "CumulusLinux!\r" }
#       puts "you need to update the firmware first"
#	send "sudo onie-install -a -i /tmp/cumulus-linux-3.7.3-bcm-armel.bin2\r"
#	sleep 30
#	expect "Are you sure (y/N)? cumulus@cumulus:~$"
#	send "y\r"	
#	sleep 1020
#	expect "root@cumulus:~# "

#}	





#send "exit\r"
#send "exit\r"
#DHCP off
#spawn ssh -o StrictHostKeyChecking=no root@10.10.10.17 "systemctl stop dhcpd"
#expect "password:" { send -- "cluster\r" }
#sleep 1
